@page
@model StudentEnrollmentSystem.Pages.Account.UpdateProfileModel
@{
    Layout = "_Layout";
}

@if (!string.IsNullOrEmpty(TempData["ErrorMessage"] as string))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error:</strong>
        <ul>
            @Html.Raw(TempData["ErrorMessage"])
        </ul>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (!string.IsNullOrEmpty(TempData["SuccessMessage"] as string))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<h2 class="text-center">Update Profile</h2>

<div class="container">
    <form method="post" asp-page="/Account/UpdateProfile" class="profile-form" id="profile-form" novalidate>
        <input type="hidden" asp-for="Student.StudentId" />
        <input type="hidden" asp-for="Student.StudentName" />
        <input type="hidden" asp-for="Student.Password" />

        <fieldset class="section">
            <legend>Permanent Home Address</legend>
            <label>Address:</label>
            <textarea asp-for="Student.HomeAddress" class="form-control"></textarea>

            <label>Postcode:</label>
            <input type="text" asp-for="Student.HomePostcode" class="form-control" />

            <label>City:</label>
            <input type="text" asp-for="Student.HomeCity" class="form-control" />

            <label>Country:</label>
            <select id="homeCountry" asp-for="Student.HomeCountry" class="form-control country-dropdown" data-selected="@Model.Student.HomeCountry">
                <option value="">Select Country</option>
            </select>

            <label>State:</label>
            <select id="homeState" asp-for="Student.HomeState" class="form-control state-dropdown" data-selected="@Model.Student.HomeState">
                <option value="">Select State</option>
            </select>
        </fieldset>

        <fieldset class="section">
            <legend>Current Mailing Address</legend>
            <label>Address:</label>
            <textarea asp-for="Student.MailAddress" class="form-control"></textarea>

            <label>Postcode:</label>
            <input type="text" asp-for="Student.MailPostcode" class="form-control" />

            <label>City:</label>
            <input type="text" asp-for="Student.MailCity" class="form-control" />

            <label>Country:</label>
            <select id="mailCountry" asp-for="Student.MailCountry" class="form-control country-dropdown" data-selected="@Model.Student.MailCountry">
                <option value="">Select Country</option>
            </select>

            <label>State:</label>
            <select id="mailState" asp-for="Student.MailState" class="form-control state-dropdown" data-selected="@Model.Student.MailState">
                <option value="">Select State</option>
            </select>
        </fieldset>

        <fieldset class="section">
            <legend>Contact Information</legend>
            <label>Primary Email:</label>
            <input type="email" asp-for="Student.PrimaryEmail" class="form-control @(ModelState.ContainsKey("Student.PrimaryEmail") && ModelState["Student.PrimaryEmail"].Errors.Count > 0 ? "input-error" : "")" />

            <label>Alternative Email:</label>
            <input type="email" asp-for="Student.AlternativeEmail" class="form-control @(ModelState.ContainsKey("Student.AlternativeEmail") && ModelState["Student.AlternativeEmail"].Errors.Count > 0 ? "input-error" : "")" />

            <label>Phone No:</label>
            <input type="text" asp-for="Student.PhoneNo" class="form-control @(ModelState.ContainsKey("Student.PhoneNo") && ModelState["Student.PhoneNo"].Errors.Count > 0 ? "input-error" : "")" />
            <small class="info-text">Enter numbers only with country code (e.g., 60164915163)</small>

            <label>Mobile No:</label>
            <input type="text" asp-for="Student.MobileNo" class="form-control @(ModelState.ContainsKey("Student.MobileNo") && ModelState["Student.MobileNo"].Errors.Count > 0 ? "input-error" : "")" />
            <small class="info-text">Enter numbers only with country code (e.g., 60164915163)</small>

            <label>Emergency Contact Relationship:</label>
            <select asp-for="Student.EmergencyContactRelationship" class="form-control">
                <option value="Father">Father</option>
                <option value="Mother">Mother</option>
                <option value="Guardian">Guardian</option>
                <option value="Friend">Friend</option>
                <option value="Relative">Relative</option>
            </select>

            <label>Emergency Contact Person:</label>
            <input type="text" asp-for="Student.EmergencyContactPerson" class="form-control" />

            <label>Emergency Contact HP:</label>
            <input type="text" asp-for="Student.EmergencyContactHp" class="form-control @(ModelState.ContainsKey("Student.EmergencyContactHp") && ModelState["Student.EmergencyContactHp"].Errors.Count > 0 ? "input-error" : "")" />
            <small class="info-text">Enter numbers only with country code (e.g., 60164915163)</small>
        </fieldset>

        <div class="button-container">
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" onclick="window.location.href='/Main'">Cancel</button>
        </div>
    </form>
</div>

<script>

    $(document).ready(function () {
        let countryStateData;

        $.getJSON('/JSON/CountryState.json', function (data) {
            countryStateData = data;
            populateCountries();
            restoreSelectedValues();
        });

        function populateCountries() {
            $('.country-dropdown').each(function () {
                let select = $(this);
                let selectedCountry = select.attr("data-selected");

                select.empty().append(new Option("Select Country", ""));
                $.each(countryStateData, function (country, states) {
                    let option = new Option(country, country);
                    if (country === selectedCountry) option.selected = true;
                    select.append(option);
                });

                let stateDropdown = select.closest('fieldset').find('.state-dropdown');
                populateStates(select, stateDropdown);
            });
        }

        function populateStates(countryDropdown, stateDropdown) {
            let country = countryDropdown.val();
            let selectedState = stateDropdown.attr("data-selected");

            stateDropdown.empty().append(new Option("Select State", ""));
            if (country && countryStateData[country]) {
                $.each(countryStateData[country], function (_, state) {
                    let option = new Option(state, state);
                    if (state === selectedState) option.selected = true;
                    stateDropdown.append(option);
                });
            }
        }

        function restoreSelectedValues() {
            $('.country-dropdown').each(function () {
                let countryDropdown = $(this);
                let stateDropdown = $(this).closest('fieldset').find('.state-dropdown');
                populateStates(countryDropdown, stateDropdown);
            });
        }

        $('.country-dropdown').change(function () {
            let countryDropdown = $(this);
            let stateDropdown = $(this).closest('fieldset').find('.state-dropdown');
            populateStates(countryDropdown, stateDropdown);
        });
    });

    document.getElementById("profile-form").addEventListener("submit", function (event) {
        let isValid = true;
        let errorMessages = "<strong>Please correct the following errors:</strong><ul>";

        document.querySelectorAll(".form-control, .country-dropdown, .state-dropdown").forEach(input => {
            input.classList.remove("input-error");
        });

        const requiredFields = {
            "HomeAddress": "Home Address",
            "HomePostcode": "Home Postcode",
            "HomeCity": "Home City",
            "HomeCountry": "Home Country",
            "HomeState": "Home State",
            "MailAddress": "Mailing Address",
            "MailPostcode": "Mailing Postcode",
            "MailCity": "Mailing City",
            "MailCountry": "Mailing Country",
            "MailState": "Mailing State",
            "PrimaryEmail": "Primary Email",
            "PhoneNo": "Phone Number",
            "MobileNo": "Mobile Number",
            "EmergencyContactRelationship": "Emergency Contact Relationship",
            "EmergencyContactPerson": "Emergency Contact Person",
            "EmergencyContactHp": "Emergency Contact Phone"
        };

        Object.keys(requiredFields).forEach(field => {
            let input = document.getElementById(`Student_${field}`);
            if (input && input.value.trim() === "") {
                isValid = false;
                input.classList.add("input-error");
                errorMessages += `<li>${requiredFields[field]} is required.</li>`;
            }
        });

        document.querySelectorAll("select.country-dropdown, select.state-dropdown").forEach(select => {
            if (select.value.trim() === "" || select.value.includes("Select")) {
                isValid = false;
                select.classList.add("input-error");
                let labelText = select.previousElementSibling.textContent.trim();
                errorMessages += `<li>${labelText} must be selected.</li>`;
            }
        });

        document.querySelectorAll("[type='email']").forEach(input => {
            if (!input.validity.valid) {
                isValid = false;
                input.classList.add("input-error");
                let labelText = input.previousElementSibling.textContent.trim();
                errorMessages += `<li>Enter a valid email address for ${labelText}.</li>`;
            }
        });

        document.querySelectorAll("[type='text']").forEach(input => {
            if (input.value && (input.id.includes("PhoneNo") || input.id.includes("MobileNo") || input.id.includes("EmergencyContactHp"))) {
                let phoneRegex = /^[0-9]{10,15}$/;
                if (!phoneRegex.test(input.value)) {
                    isValid = false;
                    input.classList.add("input-error");
                    let labelText = input.previousElementSibling.textContent.trim();
                    errorMessages += `<li>Enter a valid phone number with country code for ${labelText} (e.g., 60164915163).</li>`;
                }
            }
        });

        if (!isValid) {
            errorMessages += "</ul>";

            let errorBox = document.querySelector(".alert-danger");
            if (!errorBox) {
                errorBox = document.createElement("div");
                errorBox.className = "alert alert-danger alert-dismissible fade show";
                errorBox.setAttribute("role", "alert");
                errorBox.innerHTML = `
                    <strong>Error:</strong>
                    <ul id="error-list">${errorMessages}</ul>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                document.querySelector(".container").insertAdjacentElement("afterbegin", errorBox);
            } else {
                errorBox.innerHTML = `
                    <strong>Error:</strong>
                    <ul id="error-list">${errorMessages}</ul>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                errorBox.style.display = "block";
            }

            window.scrollTo({ top: 0, behavior: "smooth" });

            event.preventDefault();
            return false;
        }
    });

</script>

<style>
    .container {
        max-width: 900px;
        margin: auto;
        padding: 20px;
        background: white;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow-y: auto;
    }

    .profile-form {
        display: flex;
        flex-direction: column;
    }

    .section {
        margin-bottom: 20px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background: #f9f9f9;
    }

    label {
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #ccc;
    }

    .button-container {
        display: flex;
        justify-content: space-between;
    }

    button {
        width: 48%;
        padding: 10px;
        font-size: 16px;
        font-weight: bold;
    }

    .input-error {
        border: 2px solid red;
        background-color: #ffe6e6;
    }

    
</style>
